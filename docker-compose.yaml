version: '3.8'

services:
  # Servicio de la base de datos para Airflow
  postgres:
    image: postgres:13
    container_name: postgres
    hostname: postgres
    environment:
      - POSTGRES_USER=airflow
      - POSTGRES_PASSWORD=airflow
      - POSTGRES_DB=airflow
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $$POSTGRES_DB -U $$POSTGRES_USER"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - mlops-network

  # Nota: MLflow y MinIO removidos. Se usa tracking local por archivos (./mlruns)

  # Servicio del servidor web de Airflow
  airflow-webserver:
    build:
      context: ./
      dockerfile: Dockerfile.airflow
    container_name: airflow-webserver
    hostname: airflow-webserver
    command: ["webserver"]
    environment:
      - AIRFLOW__CORE__DAGS_FOLDER=/opt/airflow/dags
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres:5432/airflow
      - AIRFLOW__CORE__LOAD_EXAMPLES=False
      - AIRFLOW__WEBSERVER__RBAC=true
      - AIRFLOW__WEBSERVER__ENABLE_CORS=true
    ports:
      - "8080:8080"
    volumes:
      - ./dags:/opt/airflow/dags
      - ./scripts:/opt/airflow/scripts
      - ./data:/opt/airflow/data
      - ./mlruns:/mlruns
    depends_on:
      - postgres
    networks:
      - mlops-network

  # Servicio del scheduler de Airflow
  airflow-scheduler:
    build:
      context: ./
      dockerfile: Dockerfile.airflow
    container_name: airflow-scheduler
    hostname: airflow-scheduler
    command: ["scheduler"]
    environment:
      - AIRFLOW__CORE__DAGS_FOLDER=/opt/airflow/dags
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres:5432/airflow
      - AIRFLOW__CORE__LOAD_EXAMPLES=False
    volumes:
      - ./dags:/opt/airflow/dags
      - ./scripts:/opt/airflow/scripts
      - ./data:/opt/airflow/data
      - ./mlruns:/mlruns
    depends_on:
      - postgres
    networks:
      - mlops-network

  # Servicio de MLflow UI (usa el directorio local ./mlruns)
  mlflow-ui:
    image: ghcr.io/mlflow/mlflow:latest
    container_name: mlflow-ui
    command: mlflow ui --backend-store-uri /mlruns --host 0.0.0.0 --port 5000
    ports:
      - "5001:5000"
    volumes:
      - ./mlruns:/mlruns
    networks:
      - mlops-network

networks:
  mlops-network:
    driver: bridge